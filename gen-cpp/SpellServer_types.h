/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SpellServer_TYPES_H
#define SpellServer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace SpellServer {

typedef struct _SpellRequest__isset {
  _SpellRequest__isset() : to_check(false) {}
  bool to_check;
} _SpellRequest__isset;

class SpellRequest {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  SpellRequest() {
  }

  virtual ~SpellRequest() throw() {}

  std::vector<std::string>  to_check;

  _SpellRequest__isset __isset;

  void __set_to_check(const std::vector<std::string> & val) {
    to_check = val;
  }

  bool operator == (const SpellRequest & rhs) const
  {
    if (!(to_check == rhs.to_check))
      return false;
    return true;
  }
  bool operator != (const SpellRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpellRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpellRequest &a, SpellRequest &b);

typedef struct _SpellResponse__isset {
  _SpellResponse__isset() : is_correct(false) {}
  bool is_correct;
} _SpellResponse__isset;

class SpellResponse {
 public:

  static const char* ascii_fingerprint; // = "32DC9F1EC2D276BDA69B3700356C9E85";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xDC,0x9F,0x1E,0xC2,0xD2,0x76,0xBD,0xA6,0x9B,0x37,0x00,0x35,0x6C,0x9E,0x85};

  SpellResponse() {
  }

  virtual ~SpellResponse() throw() {}

  std::vector<bool>  is_correct;

  _SpellResponse__isset __isset;

  void __set_is_correct(const std::vector<bool> & val) {
    is_correct = val;
  }

  bool operator == (const SpellResponse & rhs) const
  {
    if (!(is_correct == rhs.is_correct))
      return false;
    return true;
  }
  bool operator != (const SpellResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpellResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpellResponse &a, SpellResponse &b);

} // namespace

#endif
