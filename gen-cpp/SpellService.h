/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SpellService_H
#define SpellService_H

#include <thrift/TDispatchProcessor.h>
#include "SpellServer_types.h"

namespace SpellServer {

class SpellServiceIf {
 public:
  virtual ~SpellServiceIf() {}
  virtual void spellcheck(SpellResponse& _return, const SpellRequest& request) = 0;
};

class SpellServiceIfFactory {
 public:
  typedef SpellServiceIf Handler;

  virtual ~SpellServiceIfFactory() {}

  virtual SpellServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SpellServiceIf* /* handler */) = 0;
};

class SpellServiceIfSingletonFactory : virtual public SpellServiceIfFactory {
 public:
  SpellServiceIfSingletonFactory(const boost::shared_ptr<SpellServiceIf>& iface) : iface_(iface) {}
  virtual ~SpellServiceIfSingletonFactory() {}

  virtual SpellServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SpellServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SpellServiceIf> iface_;
};

class SpellServiceNull : virtual public SpellServiceIf {
 public:
  virtual ~SpellServiceNull() {}
  void spellcheck(SpellResponse& /* _return */, const SpellRequest& /* request */) {
    return;
  }
};

typedef struct _SpellService_spellcheck_args__isset {
  _SpellService_spellcheck_args__isset() : request(false) {}
  bool request;
} _SpellService_spellcheck_args__isset;

class SpellService_spellcheck_args {
 public:

  SpellService_spellcheck_args() {
  }

  virtual ~SpellService_spellcheck_args() throw() {}

  SpellRequest request;

  _SpellService_spellcheck_args__isset __isset;

  void __set_request(const SpellRequest& val) {
    request = val;
  }

  bool operator == (const SpellService_spellcheck_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SpellService_spellcheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpellService_spellcheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SpellService_spellcheck_pargs {
 public:


  virtual ~SpellService_spellcheck_pargs() throw() {}

  const SpellRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpellService_spellcheck_result__isset {
  _SpellService_spellcheck_result__isset() : success(false) {}
  bool success;
} _SpellService_spellcheck_result__isset;

class SpellService_spellcheck_result {
 public:

  SpellService_spellcheck_result() {
  }

  virtual ~SpellService_spellcheck_result() throw() {}

  SpellResponse success;

  _SpellService_spellcheck_result__isset __isset;

  void __set_success(const SpellResponse& val) {
    success = val;
  }

  bool operator == (const SpellService_spellcheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SpellService_spellcheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpellService_spellcheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpellService_spellcheck_presult__isset {
  _SpellService_spellcheck_presult__isset() : success(false) {}
  bool success;
} _SpellService_spellcheck_presult__isset;

class SpellService_spellcheck_presult {
 public:


  virtual ~SpellService_spellcheck_presult() throw() {}

  SpellResponse* success;

  _SpellService_spellcheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SpellServiceClient : virtual public SpellServiceIf {
 public:
  SpellServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SpellServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void spellcheck(SpellResponse& _return, const SpellRequest& request);
  void send_spellcheck(const SpellRequest& request);
  void recv_spellcheck(SpellResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpellServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SpellServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SpellServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_spellcheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SpellServiceProcessor(boost::shared_ptr<SpellServiceIf> iface) :
    iface_(iface) {
    processMap_["spellcheck"] = &SpellServiceProcessor::process_spellcheck;
  }

  virtual ~SpellServiceProcessor() {}
};

class SpellServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SpellServiceProcessorFactory(const ::boost::shared_ptr< SpellServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SpellServiceIfFactory > handlerFactory_;
};

class SpellServiceMultiface : virtual public SpellServiceIf {
 public:
  SpellServiceMultiface(std::vector<boost::shared_ptr<SpellServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpellServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SpellServiceIf> > ifaces_;
  SpellServiceMultiface() {}
  void add(boost::shared_ptr<SpellServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void spellcheck(SpellResponse& _return, const SpellRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->spellcheck(_return, request);
    }
    ifaces_[i]->spellcheck(_return, request);
    return;
  }

};

} // namespace

#endif
